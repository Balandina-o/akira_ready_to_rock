{"version":3,"file":"main.js","mappings":"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","sources":["webpack://akira/webpack/runtime/chunk loaded","webpack://akira/./src/resources.ts","webpack://akira/./src/main-menu/AkiraOfficialArt.ts","webpack://akira/./src/main-menu/GameLogo.ts","webpack://akira/./src/main-menu/MenuBackground.ts","webpack://akira/./src/main-menu/components/StartGameBtn.ts","webpack://akira/./src/main-menu.ts","webpack://akira/./src/player.ts","webpack://akira/./src/bird.ts","webpack://akira/./src/level.ts","webpack://akira/./src/main.ts","webpack://akira/webpack/bootstrap","webpack://akira/webpack/runtime/define property getters","webpack://akira/webpack/runtime/global","webpack://akira/webpack/runtime/hasOwnProperty shorthand","webpack://akira/webpack/runtime/publicPath","webpack://akira/webpack/runtime/jsonp chunk loading","webpack://akira/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import { DefaultLoader, ImageSource, ImageWrapping, Loader, Sound, WebAudio } from \"excalibur\";\r\n\r\nimport swordPath from './images/josuke.png';\r\nimport akiraOfficialArt from './images/akira_preview.png';\r\nimport menuBackground from './images/menu_background.png';\r\nimport gameLogo from './images/game_logo.png';\r\nimport startGameBtn from './images/start_game_btn.png';\r\nimport startGameBtnHover from './images/start_game_btn_hover.png';\r\n\r\nimport backgroundPreviewMusicPath from './sounds/rhchp_can_not_stop.ogg';\r\nimport backgroundLevelMusicPath from './sounds/the_strokes_reptilia_instrumental.ogg';\r\n\r\n\r\n// It is convenient to put your resources in one place\r\nexport const Resources = {\r\n  Sword: new ImageSource(swordPath),\r\n  AkiraOfficialArt: new ImageSource(akiraOfficialArt),\r\n  MenuBackground: new ImageSource(menuBackground, {\r\n    wrapping: ImageWrapping.Mirror\r\n  }),\r\n\r\n  GameLogo: new ImageSource(gameLogo),\r\n  StartGameBtn: new ImageSource(startGameBtn),\r\n  StartGameBtnHover: new ImageSource(startGameBtnHover),\r\n\r\n  PreviewMusic: new Sound(backgroundPreviewMusicPath),\r\n  BackgroundMusic: new Sound(backgroundLevelMusicPath)\r\n} as const;\r\n// So when you type Resources.Sword -> ImageSource\r\n\r\n// We build a loader and add all of our resources to the boot loader\r\n// You can build your own loader by extending DefaultLoader\r\nexport const loader = new Loader();\r\n\r\nfor (const res of Object.values(Resources)) {\r\n  loader.addResource(res);\r\n}\r\n","import { Actor, Collider, CollisionContact, Engine, Side, vec, WebAudio } from \"excalibur\";\r\nimport { Resources } from \"../resources\";\r\nimport { game } from \"@/main\";\r\n\r\n// Actors are the main unit of composition you'll likely use, anything that you want to draw and move around the screen\r\n// is likely built with an actor\r\n\r\n// They contain a bunch of useful components that you might use\r\n// actor.transform\r\n// actor.motion\r\n// actor.graphics\r\n// actor.body\r\n// actor.collider\r\n// actor.actions\r\n// actor.pointer\r\n\r\n\r\nexport class AkiraOfficialArt extends Actor {\r\n  constructor() {\r\n    super({\r\n      // Giving your actor a name is optional, but helps in debugging using the dev tools or debug mode\r\n      // https://github.com/excaliburjs/excalibur-extension/\r\n      // Chrome: https://chromewebstore.google.com/detail/excalibur-dev-tools/dinddaeielhddflijbbcmpefamfffekc\r\n      // Firefox: https://addons.mozilla.org/en-US/firefox/addon/excalibur-dev-tools/\r\n      name: 'AkiraOfficialArt',\r\n      pos: vec(0, 370),\r\n      width: 1,\r\n      height: 1,\r\n      // anchor: vec(0, 0), // Actors default center colliders and graphics with anchor (0.5, 0.5)\r\n      // collisionType: CollisionType.Active, // Collision Type Active means this participates in collisions read more https://excaliburjs.com/docs/collisiontypes\r\n    });\r\n    \r\n  }\r\n\r\n  override onInitialize() {\r\n    // Generally recommended to stick logic in the \"On initialize\"\r\n    // This runs before the first update\r\n    // Useful when\r\n    // 1. You need things to be loaded like Images for graphics\r\n    // 2. You need excalibur to be initialized & started \r\n    // 3. Deferring logic to run time instead of constructor time\r\n    // 4. Lazy instantiation\r\n    this.graphics.add(Resources.AkiraOfficialArt.toSprite());\r\n\r\n    // Actions are useful for scripting common behavior, for example patrolling enemies\r\n    // this.actions.delay(2000);\r\n    this.actions.moveBy({ offset: vec(290, 0), durationMs: 300 })\r\n\r\n    // Sometimes you want to click on an actor!\r\n    this.on('pointerdown', evt => {\r\n      console.log('You clicked the actor @', evt.worldPos.toString());\r\n    });\r\n  }\r\n\r\n  override onPreUpdate(engine: Engine, elapsedMs: number): void {\r\n    // Put any update logic here runs every frame before Actor builtins\r\n  }\r\n\r\n  override onPostUpdate(engine: Engine, elapsedMs: number): void {\r\n    // Put any update logic here runs every frame after Actor builtins\r\n  }\r\n\r\n  override onPreCollisionResolve(self: Collider, other: Collider, side: Side, contact: CollisionContact): void {\r\n    // Called before a collision is resolved, if you want to opt out of this specific collision call contact.cancel()\r\n  }\r\n\r\n  override onPostCollisionResolve(self: Collider, other: Collider, side: Side, contact: CollisionContact): void {\r\n    // Called every time a collision is resolved and overlap is solved\r\n  }\r\n\r\n  override onCollisionStart(self: Collider, other: Collider, side: Side, contact: CollisionContact): void {\r\n    // Called when a pair of objects are in contact\r\n  }\r\n\r\n  override onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact): void {\r\n    // Called when a pair of objects separates\r\n  }\r\n}\r\n","import { Actor, vec } from \"excalibur\";\r\nimport { Resources } from \"../resources\";\r\n\r\nexport class GameLogo extends Actor {\r\n  constructor() {\r\n    super({\r\n      name: 'GameLogo',\r\n      pos: vec(720, 0),\r\n      width: 50,\r\n      height: 50\r\n    });\r\n  }\r\n\r\n  override onInitialize() {\r\n    this.graphics.add(Resources.GameLogo.toSprite());\r\n    this.actions.moveBy({ offset: vec(0, 150), durationMs: 300 })\r\n  }\r\n}\r\n","import { Actor, DisplayMode, vec } from \"excalibur\";\r\nimport { Resources } from \"../resources\";\r\n\r\nexport class MenuBackground extends Actor {\r\n  constructor() {\r\n    super({\r\n      name: 'MenuBackground',\r\n      pos: vec(600, 300),\r\n    });\r\n  }\r\n\r\n  override onInitialize() {\r\n    this.graphics.add(Resources.MenuBackground.toSprite());\r\n    this.actions.moveBy({ offset: vec(0, 100), durationMs: 300 })\r\n  }\r\n}\r\n","/** Модель экспортирует компонент кнопки старта игры. */\r\n\r\nimport { game } from \"@/main\";\r\n\r\nimport { Actor, vec } from \"excalibur\";\r\nimport { Resources } from \"../../resources\";\r\n\r\n\r\nexport class StartGameBtn extends Actor {\r\n  constructor() {\r\n    super({\r\n      name: 'StartGameBtn',\r\n      pos: vec(1500, 550),\r\n      width: 20,\r\n      height: 20\r\n    });\r\n  }\r\n\r\n  override onInitialize() {\r\n    this.graphics.add(Resources.StartGameBtn.toSprite());\r\n    this.actions.moveBy({ offset: vec(-600, 0), durationMs: 300 });\r\n\r\n    this.on('pointerenter', event => { // Обработчик события наведения на кнопку\r\n        this.graphics.add(Resources.StartGameBtnHover.toSprite());\r\n    });\r\n\r\n    this.on('pointerleave', event => { // Обработчик события потери кнопкой фокуса\r\n        this.graphics.add(Resources.StartGameBtn.toSprite());\r\n    });\r\n\r\n    this.on('pointerdown', evt => { // Обработчик события клика по кнопке\r\n        Resources.PreviewMusic.stop();\r\n        // Переходим на страницу с уровнем\r\n        game.goToScene('level');\r\n    });\r\n  }\r\n}\r\n","import { Label, Font, Buttons, Color, DefaultLoader, Engine, ExcaliburGraphicsContext, Scene, SceneActivationContext, WebAudio, ScreenElement } from \"excalibur\";\r\nimport { Player } from \"./player\";\r\nimport { Resources } from \"./resources\";\r\nimport { game } from \"./main\";\r\nimport { AkiraOfficialArt } from \"./main-menu/AkiraOfficialArt\";\r\nimport { GameLogo } from \"./main-menu/GameLogo\";\r\nimport { MenuBackground } from \"./main-menu/MenuBackground\";\r\nimport { StartGameBtn } from \"./main-menu/components/StartGameBtn\";\r\n\r\nexport class MainMenu extends Scene {\r\n    startGame = new ScreenElement({\r\n        x: 0,\r\n        y: 0,\r\n        z: 2,\r\n    });\r\n\r\n    // scoreLabel = new Label({\r\n    //     text: 'Score: 0',\r\n    //     x: 0,\r\n    //     y: 0,\r\n    //     z: 2,\r\n    //     font: new Font({\r\n    //         size: 20,\r\n    //         color: Color.White\r\n    //     }),\r\n    // });\r\n\r\n    override onInitialize(engine: Engine): void {\r\n    const menuBackground = new MenuBackground();\r\n    this.add(menuBackground); // Actors need to be added to a scene to be drawn\r\n    const akiraOfficialArt = new AkiraOfficialArt();\r\n    this.add(akiraOfficialArt);\r\n    const gameLogo = new GameLogo();\r\n    this.add(gameLogo); // Actors need to be added to a scene to be drawn\r\n    const startGameBtn = new StartGameBtn();\r\n    this.add(startGameBtn); // Actors need to be added to a scene to be drawn\r\n\r\n    // this.add(this.scoreLabel);\r\n    this.add(this.startGame);\r\n\r\n    // akiraOfficialArt.onInitialize = async() => {\r\n    //     WebAudio.unlock;\r\n    //     Resources.PreviewMusic.loop = true;\r\n    //     Resources.PreviewMusic.play();\r\n    //     WebAudio.unlock;\r\n    // }\r\n    if ( Resources.AkiraOfficialArt.isLoaded ) {\r\n        // akiraOfficialArt.actions.callMethod( ()=> window.click());\r\n    }\r\n\r\n    // ('pointerdown', evt => {\r\n    //     WebAudio.unlock();\r\n    //     Resources.PreviewMusic.loop = true;\r\n    //     Resources.PreviewMusic.play();\r\n    //   });\r\n\r\n    WebAudio.unlock;\r\n    Resources.PreviewMusic.loop = true;\r\n    Resources.PreviewMusic.play();\r\n    WebAudio.unlock;\r\n    }\r\n    override onPreLoad(loader: DefaultLoader): void {\r\n        // Add any scene specific resources to load\r\n    }\r\n\r\n    override onActivate(context: SceneActivationContext<unknown>): void {\r\n        // WebAudio.unlock;\r\n    }\r\n\r\n    override onDeactivate(context: SceneActivationContext): void {\r\n        // Called when Excalibur transitions away from this scene\r\n        // Only 1 scene is active at a time\r\n    }\r\n\r\n    override onPreUpdate(engine: Engine, elapsedMs: number): void {\r\n        // Called before anything updates in the scene\r\n    }\r\n\r\n    override onPostUpdate(engine: Engine, elapsedMs: number): void {\r\n        // Called after everything updates in the scene\r\n    }\r\n\r\n    override onPreDraw(ctx: ExcaliburGraphicsContext, elapsedMs: number): void {\r\n        // Called before Excalibur draws to the screen\r\n    }\r\n\r\n    override onPostDraw(ctx: ExcaliburGraphicsContext, elapsedMs: number): void {\r\n        // Called after Excalibur draws to the screen\r\n    }\r\n}","import { Actor, Collider, CollisionContact, Engine, Side, vec } from \"excalibur\";\r\nimport { Resources } from \"./resources\";\r\n\r\n// Actors are the main unit of composition you'll likely use, anything that you want to draw and move around the screen\r\n// is likely built with an actor\r\n\r\n// They contain a bunch of useful components that you might use\r\n// actor.transform\r\n// actor.motion\r\n// actor.graphics\r\n// actor.body\r\n// actor.collider\r\n// actor.actions\r\n// actor.pointer\r\n\r\n\r\nexport class Player extends Actor {\r\n  constructor() {\r\n    super({\r\n      // Giving your actor a name is optional, but helps in debugging using the dev tools or debug mode\r\n      // https://github.com/excaliburjs/excalibur-extension/\r\n      // Chrome: https://chromewebstore.google.com/detail/excalibur-dev-tools/dinddaeielhddflijbbcmpefamfffekc\r\n      // Firefox: https://addons.mozilla.org/en-US/firefox/addon/excalibur-dev-tools/\r\n      name: 'Player',\r\n      pos: vec(150, 150),\r\n      width: 100,\r\n      height: 100,\r\n      // anchor: vec(0, 0), // Actors default center colliders and graphics with anchor (0.5, 0.5)\r\n      // collisionType: CollisionType.Active, // Collision Type Active means this participates in collisions read more https://excaliburjs.com/docs/collisiontypes\r\n    });\r\n    \r\n  }\r\n\r\n  override onInitialize() {\r\n    // Generally recommended to stick logic in the \"On initialize\"\r\n    // This runs before the first update\r\n    // Useful when\r\n    // 1. You need things to be loaded like Images for graphics\r\n    // 2. You need excalibur to be initialized & started \r\n    // 3. Deferring logic to run time instead of constructor time\r\n    // 4. Lazy instantiation\r\n    this.graphics.add(Resources.Sword.toSprite());\r\n\r\n    // Actions are useful for scripting common behavior, for example patrolling enemies\r\n    this.actions.delay(2000);\r\n    this.actions.repeatForever(ctx => {\r\n      ctx.moveBy({offset: vec(100, 0), durationMs: 1000});\r\n      ctx.moveBy({offset: vec(0, 100), durationMs: 1000});\r\n      ctx.moveBy({offset: vec(-100, 0), durationMs: 1000});\r\n      ctx.moveBy({offset: vec(0, -100), durationMs: 1000});\r\n    });\r\n\r\n    // Sometimes you want to click on an actor!\r\n    this.on('pointerdown', evt => {\r\n      // Pointer events tunnel in z order from the screen down, you can cancel them!\r\n      // if (true) {\r\n      //   evt.cancel();\r\n      // }\r\n      console.log('You clicked the actor @', evt.worldPos.toString());\r\n    });\r\n  }\r\n\r\n  override onPreUpdate(engine: Engine, elapsedMs: number): void {\r\n    // Put any update logic here runs every frame before Actor builtins\r\n  }\r\n\r\n  override onPostUpdate(engine: Engine, elapsedMs: number): void {\r\n    // Put any update logic here runs every frame after Actor builtins\r\n  }\r\n\r\n  override onPreCollisionResolve(self: Collider, other: Collider, side: Side, contact: CollisionContact): void {\r\n    // Called before a collision is resolved, if you want to opt out of this specific collision call contact.cancel()\r\n  }\r\n\r\n  override onPostCollisionResolve(self: Collider, other: Collider, side: Side, contact: CollisionContact): void {\r\n    // Called every time a collision is resolved and overlap is solved\r\n  }\r\n\r\n  override onCollisionStart(self: Collider, other: Collider, side: Side, contact: CollisionContact): void {\r\n    // Called when a pair of objects are in contact\r\n  }\r\n\r\n  override onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact): void {\r\n    // Called when a pair of objects separates\r\n  }\r\n}\r\n","import * as ex from \"excalibur\";\r\n\r\nimport { Resources } from \"./resources\";\r\nimport { MyLevel } from \"./level\";\r\n\r\n\r\nexport class Bird extends ex.Actor {\r\n    playing = false;\r\n    jumping = false;\r\n    startSprite!: ex.Sprite;\r\n    upAnimation!: ex.Animation;\r\n    downAnimation!: ex.Animation;\r\n    leftAnimation!: ex.Animation;\r\n    rightAnimation!: ex.Animation;\r\n    constructor(private level: MyLevel) {\r\n        super({\r\n            name: 'Player',\r\n            pos: ex.vec(150, 550)\r\n        });\r\n    }\r\n\r\n    override onInitialize(): void {\r\n        const spriteSheet = ex.SpriteSheet.fromImageSource({\r\n            image: Resources.Sword,\r\n            grid: {\r\n                rows: 8,\r\n                columns: 9,\r\n                spriteWidth: 25,\r\n                spriteHeight: 65,\r\n            }\r\n        });\r\n\r\n        this.startSprite = spriteSheet.getSprite(1, 0);\r\n        this.leftAnimation = ex.Animation.fromSpriteSheet(spriteSheet, [3, 4, 5, 6, 7], 100);\r\n        this.rightAnimation = ex.Animation.fromSpriteSheet(spriteSheet, [3, 4, 5, 6, 7], 100);\r\n        this.upAnimation = ex.Animation.fromSpriteSheet(spriteSheet, [2, 1, 0], 150, ex.AnimationStrategy.Freeze);\r\n        this.downAnimation = ex.Animation.fromSpriteSheet(spriteSheet, [0, 1, 2], 150, ex.AnimationStrategy.Freeze);\r\n        \r\n        // Register\r\n        this.graphics.add(\"left\", this.leftAnimation);\r\n        this.graphics.add(\"right\", this.rightAnimation);\r\n        this.graphics.add('down', this.downAnimation);\r\n        this.graphics.add('up', this.upAnimation);\r\n        this.graphics.add('start', this.startSprite);\r\n\r\n        this.graphics.use('start');\r\n\r\n    }\r\n\r\n    private isInputActive(engine: ex.Engine) {\r\n        return (engine.input.keyboard.isHeld(ex.Keys.Space) ||\r\n                engine.input.pointers.isDown(0))\r\n    }\r\n\r\n\r\n // After main update, once per frame execute this code\r\n override onPreUpdate(engine: ex.Engine, delta: number) {\r\n    // Reset x velocity\r\n    this.vel.x = 0;\r\n\r\n    // // Player input\r\n    // if(engine.input.keyboard.isHeld(ex.Keys.Left)) { //.wasPressed\r\n    //     console.log('1111111111111111');\r\n    //     this.vel.x = -150;\r\n    // }\r\n\r\n    // if(engine.input.keyboard.isHeld(ex.Keys.Right)) {\r\n    //     console.log('2222222222');\r\n    //     this.vel.x = 150;\r\n    // }\r\n}\r\n\r\n\r\n    override onPostUpdate(engine: ex.Engine): void {\r\n        if (!this.playing) return; // если false, то ничего не делать =)\r\n\r\n           // Player input\r\n    if(engine.input.keyboard.isHeld(ex.Keys.Left)) { //.wasPressed\r\n        console.log('1111111111111111');\r\n        this.vel.x = -150;\r\n    }\r\n\r\n    if(engine.input.keyboard.isHeld(ex.Keys.Right)) {\r\n        console.log('2222222222');\r\n        this.vel.x = 150;\r\n    }\r\n    }\r\n\r\n    start() {\r\n        this.playing = true;\r\n    }\r\n\r\n    reset() {\r\n        this.stop();\r\n    }\r\n\r\n    stop() {\r\n        this.playing = false;\r\n        this.vel = ex.vec(0, 0);\r\n        this.acc = ex.vec(0, 0);\r\n    }\r\n\r\n}","import { DefaultLoader, Engine, ExcaliburGraphicsContext, Scene, SceneActivationContext } from \"excalibur\";\r\nimport { Player } from \"./player\";\r\nimport { Resources } from \"./resources\";\r\nimport { Bird } from \"./bird\";\r\n\r\nexport class MyLevel extends Scene {\r\n    bird = new Bird(this);\r\n    showStartInstructions() {\r\n        this.bird.start();\r\n    }\r\n    override onInitialize(engine: Engine): void {\r\n        // Scene.onInitialize is where we recommend you perform the composition for your game\r\n        const player = new Player();\r\n        const bird = new Bird( this );\r\n        this.add(player); // Actors need to be added to a scene to be drawn\r\n        this.add(this.bird);\r\n        \r\n        this.showStartInstructions();\r\n    }\r\n\r\n    override onPreLoad(loader: DefaultLoader): void {\r\n        // Add any scene specific resources to load\r\n        // Resources.PreviewMusic.stop();\r\n    }\r\n\r\n    override onActivate(context: SceneActivationContext<unknown>): void {\r\n        // Called when Excalibur transitions to this scene\r\n        // Only 1 scene is active at a time\r\n        Resources.BackgroundMusic.loop = true;\r\n        Resources.BackgroundMusic.play();\r\n    }\r\n\r\n    override onDeactivate(context: SceneActivationContext): void {\r\n        // Called when Excalibur transitions away from this scene\r\n        // Only 1 scene is active at a time\r\n    }\r\n\r\n    override onPreUpdate(engine: Engine, elapsedMs: number): void {\r\n        // Called before anything updates in the scene\r\n    }\r\n\r\n    override onPostUpdate(engine: Engine, elapsedMs: number): void {\r\n        // Called after everything updates in the scene\r\n    }\r\n\r\n    override onPreDraw(ctx: ExcaliburGraphicsContext, elapsedMs: number): void {\r\n        // Called before Excalibur draws to the screen\r\n    }\r\n\r\n    override onPostDraw(ctx: ExcaliburGraphicsContext, elapsedMs: number): void {\r\n        // Called after Excalibur draws to the screen\r\n    }\r\n}","import ex, { Color, DisplayMode, Engine, FadeInOut, SolverStrategy, ScreenElement, WebAudio } from \"excalibur\";\r\nimport { loader, Resources } from \"./resources\";\r\nimport { MainMenu } from \"./main-menu\";\r\nimport { MyLevel } from \"./level\";\r\nimport { Bird } from \"./bird\";\r\n\r\n// import { Bird } from './bird';\r\n// import { Ground } from './ground';\r\n\r\n// Goal is to keep main.ts small and just enough to configure the engine\r\n\r\n\r\nexport const game = new Engine({\r\n  width: 1200, // the width of the canvas\r\n  height: 760, // the height of the canvas\r\n  backgroundColor: Color.fromHex('f6acfc'), // Мигание\r\n  displayMode: DisplayMode.Fixed, // the display mode\r\n    pixelArt: true, // pixelArt will turn on the correct settings to render pixel art without jaggies or shimmering artifacts\r\n    scenes: {\r\n        start: {\r\n          scene: MainMenu,\r\n        },\r\n        level: {\r\n          scene: MyLevel,\r\n        }\r\n      },\r\n    physics: {\r\n        solver: SolverStrategy.Realistic,\r\n        substep: 5 // Sub step the physics simulation for more robust simulations\r\n    },\r\n    // fixedUpdateTimestep: 16 // Turn on fixed update timestep when consistent physic simulation is important\r\n});\r\n\r\ngame.start('start', { // name of the start scene 'start'\r\n    loader, // Optional loader (but needed for loading images/sounds)\r\n    inTransition: new FadeInOut({ // Optional in transition\r\n        duration: 800,\r\n        direction: 'in',\r\n        color: Color.ExcaliburBlue // Мигание\r\n    }),\r\n}).then(() => {\r\n    // Что-то можно сделать после старта\r\n});\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkakira\"] = self[\"webpackChunkakira\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [128], () => (__webpack_require__(606)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Resources","Sword","AkiraOfficialArt","MenuBackground","wrapping","Mirror","GameLogo","StartGameBtn","StartGameBtnHover","PreviewMusic","BackgroundMusic","loader","res","Object","values","addResource","constructor","super","name","pos","width","height","onInitialize","this","graphics","add","toSprite","actions","moveBy","offset","durationMs","on","evt","console","log","worldPos","toString","onPreUpdate","engine","elapsedMs","onPostUpdate","onPreCollisionResolve","self","other","side","contact","onPostCollisionResolve","onCollisionStart","onCollisionEnd","lastContact","event","stop","game","goToScene","MainMenu","startGame","x","y","z","menuBackground","akiraOfficialArt","gameLogo","startGameBtn","isLoaded","unlock","loop","play","onPreLoad","onActivate","context","onDeactivate","onPreDraw","ctx","onPostDraw","Player","delay","repeatForever","Bird","level","playing","jumping","spriteSheet","fromImageSource","image","grid","rows","columns","spriteWidth","spriteHeight","startSprite","getSprite","leftAnimation","fromSpriteSheet","rightAnimation","upAnimation","Freeze","downAnimation","use","isInputActive","input","keyboard","isHeld","Space","pointers","isDown","delta","vel","Left","Right","start","reset","acc","MyLevel","bird","showStartInstructions","player","backgroundColor","fromHex","displayMode","Fixed","pixelArt","scenes","scene","physics","solver","Realistic","substep","inTransition","duration","direction","color","ExcaliburBlue","then","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","Error","replace","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}